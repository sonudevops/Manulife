name: aks-poc
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
  # Allows you to run this workflow manually from the Actions tab 
  workflow_dispatch:
    inputs:
      envName:

# The environemnt variables are used from the "DEVELOPMENT" environment
  env:
  name: ${{ env name }}
  my_var: ${{ github.ref }}
jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.envName }}
    steps:
    - uses: actions/checkout@master
    
    #- name: Login to Azure
     # uses: azure/login@v1
      #with:
       #creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Connect to Azure Container Registry (ACR)
    #- name: Login to ACR
     # uses: azure/docker-login@v1
      #with:
       # login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        #username: ${{ secrets.REGISTRY_USERNAME }} 
        #password: ${{ secrets.REGISTRY_PASSWORD }}
        
    
     # Container build and push to a Azure Container Registry (ACR)
    - name: Build image and push to ACR
      run: |
       docker pull nginx
       docker tag nginx ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
       # docker build . -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
       docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
      # working-directory: ./<path-to-Dockerfile-directory>
      
  
 
    # Set Kubernetes Context
    - name: Gets K8s context
      uses: azure/aks-set-context@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
      id: login
      
    # Create namespace if doesn't exist
    - name: Create namespace in AKS if it doesn't exist
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -  
    # Create image pull secret for ACR
    - name: Create image pull secret
      uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
        
        
     # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          ${{ github.workspace }}/manifest/deployment.yaml
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}